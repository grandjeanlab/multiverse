---
title: "Pipeline specificity analysis"
author: "Joanes Grandjean"
date: "2024-06-18"
format: gfm
execute: 
  warning: false
---


## load the all the libraries used on this notebook and set important variables
```{r}

library(tidyverse)
library(ggpubr)
library(ggdist)
library(MetBrewer)

color.scheme <- "VanGogh2"
n.pipeline <- 7

met <- met.brewer(color.scheme, n.pipeline)

```


## populate the participants table with the results of the pipeline. Only run once to make the table. 
```{r}
#| eval = FALSE


# write a function that reads a table and returns the specificity of the pipeline
pipeline_specificity <- function(cor_file) {
  cor_tmp <- read_table(cor_file, col_names = FALSE, show_col_types = FALSE)
  s1 <- cor_tmp$X2[1]
  aca <- cor_tmp$X3[2]
  
  if(abs(s1) < 0.1 & abs(aca) < 0.1) {
    return(c("no", s1, aca))
  } else if (s1 > 0.1 & aca < 0.1) {
    return(c("specific", s1, aca))
  } else if (s1 < 0.1 & aca > 0.1) {
    return(c("non-specific", s1, aca))
  } else {
    return(c("spurious", s1, aca))
  }
}

#write a function that takes df, a path, and a string. Create columns in df with the specificity of the pipeline 
populate_specificity <- function(df, path, pipeline) {
  cor_files <- list.files(path, full.names = TRUE)
  for (i in 1:nrow(df)) {
    j<- str_which(cor_files, df$participant_id[i])
    if (length(j) == 1) {
      tmp <- pipeline_specificity(cor_files[j])
      df[[paste0(pipeline, ".specificity")]][i] <- tmp[1]
      df[[paste0(pipeline, ".s1")]][i] <- tmp[2]
      df[[paste0(pipeline, ".aca")]][i] <- tmp[3]
    }
    else{
      df[[paste0(pipeline, ".specificity")]][i] <- NA
      df[[paste0(pipeline, ".s1")]][i] <- NA
      df[[paste0(pipeline, ".aca")]][i] <- NA
    }
  }
  return(df)
}

# read the participants table and select the participant_id
df <- read_tsv("assets/table/participants.tsv") %>% select(participant_id)

# populate the table with the specificity of each pipeline
df <- populate_specificity(df, "/project/4180000.41/data/cas_export/corr", "spm")
df <- populate_specificity(df, "/project/4180000.41/data/rabies_export/corr", "rabies")
df <- populate_specificity(df, "/project/4180000.41/data/di1_export/corr", "di1")
df <- populate_specificity(df, "/project/4180000.41/data/di2_export/corr", "di2")
df <- populate_specificity(df, "/project/4180000.41/data/garin_export/corr", "easymribrain")
df <- populate_specificity(df, "/project/4180000.41/data/aidamri_export/corr", "aidamri")

# write the table
write_tsv(df, "assets/table/participants_specificity.tsv")

```

## Filter the participants by exclusion criteria and carry out specificity analysis

```{r}

df <- read_tsv("assets/table/participants_specificity.tsv",, show_col_types = FALSE)
df_exclude <- read_tsv("assets/table/participants_exclude.tsv", , show_col_types = FALSE)

df <- df %>% full_join(df_exclude, by = "participant_id")

# for every column in df ending with .specificity, convert the column to a factor
for (i in 2:ncol(df)) {
  if (str_detect(colnames(df)[i], "specificity")) {
    df[[colnames(df)[i]]] <- as.factor(df[[colnames(df)[i]]])
  }
}
```

```{r}
# look at specificity without filtering for data exclusion
df %>% select(spm.specificity, rabies.specificity, di1.specificity, di2.specificity, easymribrain.specificity, aidamri.specificity) %>% summary()
```

```{r}
# look at specificity after filtering for data exclusion
df %>% filter(global.exclude == 0) %>% select(spm.specificity, rabies.specificity, di1.specificity, di2.specificity, easymribrain.specificity, aidamri.specificity) %>% summary()
```

```{r}
# are the difference in specificity related to raw functional connectivity between s1?
df %>% filter(global.exclude == 0) %>% select(spm.s1, rabies.s1, di1.s1, di2.s1, easymribrain.s1, aidamri.s1) %>% summary()

``` 

```{r}
# are the difference in specificity related to raw functional connectivity between s1 and aca?
df %>% filter(global.exclude == 0) %>% select(spm.aca, rabies.aca, di1.aca, di2.aca, easymribrain.aca, aidamri.aca) %>% summary()

``` 


## this section plots pipeline specificity for each pipeline
```{r}
#| eval = FALSE

pipeline_specificity_plot <- function(df, x, y, exclude, pipeline, met){
  
  library(tidyverse)
  library(ggExtra)

  p <- df %>% filter(!!sym(exclude) != 0) %>%
    ggplot(aes(x = !!sym(x), 
               y = !!sym(y), 
               color = as.factor(global.exclude))) + 
    geom_point(size = 0.1) + 
    geom_vline(xintercept = 0.1, linetype = "dashed", linewidth=0.3) + 
    geom_hline(yintercept = 0.1, linetype = "dashed", linewidth=0.3) + 
    geom_segment(aes(x=-0.1,xend=0.1,y=-0.1,yend=-0.1),linetype = "dashed", linewidth=0.3, colour='black') + 
    geom_segment(aes(x=-0.1,xend=-0.1,y=0.1,yend=-0.1),linetype = "dashed", linewidth=0.3, colour='black') + 
    xlim(-0.5, 1) + 
    ylim(-0.5, 1) + 
    #labs(title = pipeline, x = "S1 - S1 [r]", y = "S1 - ACA [r]") +
    scale_color_manual(values = c(met, "darkgrey")) +
    theme_classic() +
    theme(legend.position = "none", axis.text =element_blank(), axis.title = element_blank(), axis.ticks = element_blank()) 

  m <- ggMarginal(p, fill = met, color = NaN, size = 10) 

  return(m)
}



spm_spec <- pipeline_specificity_plot(df, "spm.s1", "spm.aca", "spm.exclude", "SPM", met[1])
rabies_spec <- pipeline_specificity_plot(df, "rabies.s1", "rabies.aca", "rabies.exclude", "RABIES", met[2])
easymribrain_spec <- pipeline_specificity_plot(df, "easymribrain.s1", "easymribrain.aca", "easymribrain.exclude", "easyMRIbrain", met[3])
di2_spec <- pipeline_specificity_plot(df, "di2.s1", "di2.aca", "di2.exclude", "DI2", met[4])
di1_spec <- pipeline_specificity_plot(df, "di1.s1", "di1.aca", "di1.exclude", "DI1", met[5])
aidamri_spec <- pipeline_specificity_plot(df, "aidamri.s1", "aidamri.aca", "aidamri.exclude", "AIDAmri", met[6])

combine_spec <- ggarrange(spm_spec, rabies_spec, easymribrain_spec, aidamri_spec, di2_spec, di1_spec, ncol = 3, nrow = 2, labels = c("A", "B", "C", "D", "E", "F"))

#make a tmp save of the plot
ggsave("assets/tmp/specificity.png",plot=combine_spec, height=2000, width=2000, units='px')

```

## this section plots S1 - S1 correlations across pipelines
```{r}
#| eval = FALSE



# select the s1 colums and global exclude from df and pivot the table
df_s1 <- df %>% select(participant_id, spm.s1, rabies.s1, di1.s1, di2.s1, easymribrain.s1, global.exclude) %>% pivot_longer(cols = c(spm.s1, rabies.s1, di1.s1, di2.s1, easymribrain.s1), names_to = "pipeline", values_to = "s1")

# rename the pipelines to remove the .s1 and capitalize all
df_s1$pipeline <- str_to_upper(df_s1$pipeline)
df_s1$pipeline <- str_remove(df_s1$pipeline, ".S1")

s1_plot <- df_s1 %>% ggplot(aes(x = s1, y = pipeline, group = pipeline, fill = pipeline)) + 
  stat_slab(aes(thickness = after_stat(pdf*n)), scale = 0.5) + 
  stat_dotsinterval(side = "bottom", scale = 0.2, slab_linewidth = NA) +
  geom_vline(xintercept = 0.1, linetype = "dashed", linewidth=0.3) +
  scale_fill_manual(values = rev(met)) +
  xlim(-0.5, 1) +
  theme_classic() + 
  theme(legend.position = "none", axis.title.y=element_blank()) +
  labs(title = "Specific correlation", x = "S1 - S1 [r]", y = "Pipeline")

```

## this section plots S1 - ACA correlation across pipelines
```{r}
#| eval = FALSE

# select the aca colums and global exclude from df and pivot the table
df_aca <- df %>% select(participant_id, spm.aca, rabies.aca, di1.aca, di2.aca, easymribrain.aca, global.exclude) %>% pivot_longer(cols = c(spm.aca, rabies.aca, di1.aca, di2.aca, easymribrain.aca), names_to = "pipeline", values_to = "aca")

# rename the pipelines to remove the .aca and capitalize all
df_aca$pipeline <- str_to_upper(df_aca$pipeline)
df_aca$pipeline <- str_remove(df_aca$pipeline, ".ACA")


aca_plot <- df_aca %>% ggplot(aes(y = aca, x = pipeline, group = pipeline, fill = pipeline)) + 
  stat_slab(aes(thickness = after_stat(pdf*n)), scale = 0.5) + 
  stat_dotsinterval(side = "bottom", scale = 0.2, slab_linewidth = NA) +
  geom_hline(yintercept = 0.1, linetype = "dashed", linewidth=0.3) + 
  scale_fill_manual(values = rev(met)) +
  ylim(-0.5, 1) +
  theme_classic() + 
  theme(legend.position = "none", axis.title.x = element_blank()) + 
  labs(title = "Non-specific correlation", y = "S1 - ACA [r]")

```

```{r}
#| eval = FALSE

# select the specificity colums from df and pivot the table
df_spec <- df %>% select(participant_id, spm.specificity, rabies.specificity, di1.specificity, di2.specificity, easymribrain.specificity) %>% pivot_longer(cols = c(spm.specificity, rabies.specificity, di1.specificity, di2.specificity, easymribrain.specificity), names_to = "pipeline", values_to = "specific")

df_spec$pipeline <- str_remove(df_spec$pipeline, ".specificity")
df_spec$pipeline <- str_to_upper(df_spec$pipeline)

summary_plot <- df_spec %>% ggplot(aes(x = pipeline,  
                       group = specific, 
                       fill = specific)) + 
  geom_bar() +
  scale_fill_manual(values = met.brewer("VanGogh2",5)) +
  theme_classic() + 
  theme(legend.position = "none", 
        axis.title.x = element_blank(), 
        axis.line.x = element_blank(), 
        axis.ticks.x = element_blank()) +
  labs(y = "# scans")
    

```

## puts all the figures together
```{r}
#| eval = FALSE

combine_misc <- ggarrange(s1_plot, aca_plot, summary_plot, labels = c("F", "G", "H"), ncol = 3, nrow = 1)

combine_plot <- ggarrange(combine_spec, combine_misc , ncol = 1, nrow = 2)

ggsave("assets/figures/pipeline_specificity.svg", plot=combine_plot, width = 180, height = 120, unit = 'mm', dpi = 300)

```

![figure_specificity](assets/figures/pipeline_specificity.svg)
